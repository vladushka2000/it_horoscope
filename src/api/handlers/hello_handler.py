from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from dependency_injector.wiring import inject, Provide

from api.handlers import index_handler
from api.states import registration_state
from api.tools import filters, keyboards
from bases.services import user_service
from dto import user_dto
from tools import const
from tools.di_containers import service_container

router = Router()


@router.message(F.text.lower() == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
@inject
async def cmd_hello(
    message: Message,
    state: FSMContext,
    user_service_: user_service.UserService = Provide[
        service_container.ServiceContainer.user_service
    ],  # noqa
):
    user_id = message.from_user.id
    user_in_db = await user_service_.get_user(user_id)

    if user_in_db is not None:
        user_message_part = f", {user_in_db.full_name}" if user_in_db.full_name else ""

        await message.answer(text="üëã")
        await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç{user_message_part}!!")

        return

    await message.answer(
        text="–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ ‚ú®",
        reply_markup=keyboards.make_keyboard([sign.value for sign in const.Sign], is_column=True)
    )
    await state.set_state(registration_state.Registration.choosing_sign)


@router.message(registration_state.Registration.choosing_sign, F.text.in_(const.Sign))
async def sign_chosen(message: Message, state: FSMContext):
    await state.update_data(sign=message.text)
    await message.answer(
        text=f"–¢—ã {message.text.lower()}!\n"
             f"–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–≤–æ–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é üíº",
        reply_markup=keyboards.make_keyboard([role.value for role in const.CompanyRole], is_column=True)
    )
    await state.set_state(registration_state.Registration.choosing_company_role)


@router.message(registration_state.Registration.choosing_sign)
async def sign_chosen_incorrectly(message: Message):
    await message.answer(
        text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞...\n"
             "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=keyboards.make_keyboard([sign.value for sign in const.Sign], is_column=True)
    )


@router.message(registration_state.Registration.choosing_company_role, F.text.in_(const.CompanyRole))
async def role_chosen(message: Message, state: FSMContext):
    await state.update_data(company_role=message.text)
    await message.answer(
        text=f"–û–≥–æ, {message.text.lower()}!\n"
             f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–µ emoji —Ç–µ–±–µ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –ª—é–±–∏–º—ã–π —Å–º–∞–π–ª–∏–∫!",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(registration_state.Registration.choosing_emoji)


@router.message(registration_state.Registration.choosing_company_role)
async def role_chosen_incorrectly(message: Message):
    await message.answer(
        text="–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ä–æ–ª—å, –Ω–æ —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π...\n"
             "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=keyboards.make_keyboard([role.value for role in const.CompanyRole], is_column=True)
    )


@router.message(
    registration_state.Registration.choosing_emoji,
    filters.HtmlEmojiFilter()
)
@inject
async def emoji_chosen(
    message: Message,
    state: FSMContext,
    user_service_: user_service.UserService = Provide[
        service_container.ServiceContainer.user_service
    ],  # noqa
):
    await state.update_data(emoji=message.text)
    await message.answer(
        text="–í–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å! üéâ",
        reply_markup=ReplyKeyboardRemove()
    )

    user_data = await state.get_data()
    user = user_dto.UserDTO(
        id=message.from_user.id,
        full_name=message.from_user.full_name,
        sign=user_data["sign"],
        company_role=user_data["company_role"],
        emoji=user_data["emoji"]
    )

    await user_service_.create_user(user)
    await state.clear()

    await index_handler.cmd_start(message)


@router.message(registration_state.Registration.choosing_emoji)
async def emoji_chosen_incorrectly(message: Message):
    await message.answer(
        text="–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π emoji...\n"
             "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑...",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(F.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å", filters.RegisteredUserFilter())
@inject
async def cmd_profile(
    message: Message,
    user_service_: user_service.UserService = Provide[
        service_container.ServiceContainer.user_service
    ],  # noqa
):
    user_id = message.from_user.id
    user_in_db = await user_service_.get_user(user_id)

    await message.answer(
        text=f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
             f"üë§–ò–º—è - {user_in_db.full_name}\n"
             f"{user_in_db.sign.value} - —Ç–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞\n"
             f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å - {user_in_db.company_role.value}\n"
             f"{user_in_db.emoji} - —Ç–≤–æ–µ –ª–∏—á–Ω–æ–µ emoji\n"
    )

    await index_handler.cmd_start(message)
